%!TEX root=../main.tex

\subsection{Точный экспоненциальный алгоритм}

Рассмотрим теперь точный экспоненциальный алгоритм, для этого вначале приведем 
несколько определений.

Покажем как построить алгоритм для двойственной к MAS задаче:

\begin{problem}[FAS]
    Дан конечный ориентированный граф $G=(V, A)$. Нужно найти такое 
    подмножество $F\subseteq A$, такое чтобы G - F Был бы ациклическим графом и
    при этом $|F|$ была минимальной из всех возможных.
\end{problem}

Понятно, что если мы знаем решение для задачи FAS, то мы легко найдем и сам
максимальный ациклический подграф в исходном графе, как $G\left[A - F\right]$

Также введем функцию, которая упорядочивает вершины в графе:

\begin{definition}
    $\pi : V \rightarrow {1, ..., |V|}$ - функция, которая задает некоторую нумерацию на 
    множестве вершин V. При этом, $\forall a = (i, j) \in A$ :
    \begin{align*}
        \pi(i) < \pi(j) &\Rightarrow a - forward\\ 
        \pi(i) > \pi(j) &\Rightarrow a - backward\\ 
    \end{align*}
\end{definition}

С учетом функции $\pi$ можно немного переформулировать задачу FAS следующим 
образом:

\begin{problem}[FAS]
    Дан ориентированный граф $G(V, A)$. Найти такую перестановку $\pi$, что \\
    $ 
        \mathlarger{\sum}\limits_{((u, v) \in A ~\&~ \pi(u) > \pi(v)) }1
    $
     - минимальна. Иными словами, требуется найти такую перестановку, в которой
     количество обратных дуг минимально.
\end{problem}

Под оптимальной перестановкой будем понимать такую перестановку, в которой
число обратных дуг минимально.

\begin{definition}
    $X(S)$ - число обратных дуг в оптимальной перестановке для индуцированного 
    графа $G[S]$, $S \subseteq V$.
\end{definition}

Также $X(S)$ можно представить в виде следующей рекурсивной формулы:

\begin{equation}\label{xs}
    X(S) = \min\limits_{u\in S}{\left\{ X(S - u) +
    \sum\limits_{((u, v) \in A ~\&~ v\in (S-u))} \right\} }
\end{equation}

Покажем корректность рекурсивной формулы~(\ref{xs}). 
Важно понимать, что при каждом увеличении размерности, к примеру при переходе
от $S-u$ к $S$, мы при каждом рассмотрении новой вершины $u$ присваиваем есть
новый, самый большой номер в нумерации вершин. Соответственно, все дуги,
которые приходят из вершин множества $S-u$ в вершину $u$ будут являться
обратными по определению. Ну и чтобы найти минимальное количество обратных дуг
мы ищем минимум суммы минимального числа обратных дуг для множества без 
рассматриваемой вершины и числа всех дуг, которые приходят в рассматриваемую
вершину из вершин $S-u$.

\newpage

Перейдем теперь непосредственно к алгоритму. Ключевой структурой данных, 
которую мы будем использовать, будет массив $Y$ размерности $2^n \times 2$.
В ходе работы алгоритма будем рассматривать подмножества множества вершин
$S \subseteq V$, и $\forall S$:

\begin{align*}
    Y[S, 1] &= X(S) \\
    Y[S, 2] = \{v | v \in V: &X(S)~is~minimized~in~eq.~(\ref{xs})\}
\end{align*}




















